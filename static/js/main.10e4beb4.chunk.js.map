{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","data","main","temp","feels_like","humidity","fetchWeatherData","bind","opts","console","log","fetch","lat","lon","then","res","json","setState","catch","err","error","self","this","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","setInterval","alert","className","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAkEeA,E,kDA9Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GACb,EAAKA,MAAMC,KAAO,CAChBC,KAAM,CACJC,KAAM,IACNC,WAAY,IACZC,SAAU,MAId,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBAXP,E,oDAcnB,WAA2B,IAAD,OAATC,EAAS,uDAAJ,GACpBC,QAAQC,IAAI,yBACZC,MAAM,uDAAD,OAAwDH,EAAKI,IAA7D,gBAAwEJ,EAAKK,IAA7E,yDACFC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAb,GACJQ,QAAQC,IAAIT,GACZ,EAAKgB,SAAS,CAAEhB,YAEjBiB,OAAM,SAAAC,GAAG,OAAIV,QAAQW,MAAMD,Q,+BAGhC,WACE,IAAME,EAAOC,KACT,gBAAiBC,UACnBA,UAAUC,YAAYC,oBAAmB,SAASC,GAChDL,EAAKf,iBAAiB,CACpBM,IAAKc,EAASC,OAAOC,SACrBf,IAAKa,EAASC,OAAOE,YAEvBC,aAAY,kBAAMT,EAAKf,iBAAiB,CACtCM,IAAKc,EAASC,OAAOC,SACrBf,IAAKa,EAASC,OAAOE,cACnB,QAGNE,MAAM,oC,oBAIV,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,yDACuBV,KAAKtB,MAAMC,KAAKC,KAAKC,KAD5C,YAGA,8DACsBmB,KAAKtB,MAAMC,KAAKC,KAAKE,WAD3C,YAGA,gDACckB,KAAKtB,MAAMC,KAAKC,KAAKG,SADnC,gB,GAtDQ4B,IAAMC,WCSTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.10e4beb4.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.state.data = {\n      main: {\n        temp: '0',\n        feels_like: '0',\n        humidity: '0',\n      }\n    };\n\n    this.fetchWeatherData = this.fetchWeatherData.bind(this);\n  }\n\n  fetchWeatherData(opts={}) {\n    console.log('Start to load data...');\n    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${opts.lat}&lon=${opts.lon}&units=metric&appid=3590ab562c40856043d36a098484811b`)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        this.setState({ data });\n      })\n      .catch(err => console.error(err));\n  }\n\n  componentDidMount() {\n    const self = this;\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(function(position) {\n        self.fetchWeatherData({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude,\n        });\n        setInterval(() => self.fetchWeatherData({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude,\n        }), 1000*60);\n      });\n    } else {\n      alert('No place to check the weather!');\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n          {`Temperatura atual: ${this.state.data.main.temp} °C`}\n          </p>\n          <p>\n          {`Sensação termica: ${this.state.data.main.feels_like} °C`}\n          </p>\n          <p>\n          {`Humidade: ${this.state.data.main.humidity}%`}\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}